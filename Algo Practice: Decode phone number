# /*
# '''
# ❓ PROMPT
# Businesses like to make phone numbers that have meaning with English characters, but it's hard for users to convert the letter to numbers when dialing. For example, 

# *1-800-U-B-SMART* becomes *1-800-8-2-76278*

# because 8 corresponds to *T, U*, and *V* so the *U* becomes 8, 2 corresponds to *A, B*, and *C* so the *B* becomes 2, and so on according to a phone's dial pad.

# Write a function that converts the English letters to their digit equivalent while preserving the formatting.

# Example(s)
# decodePhoneNumber("1-800-U-B-SMART") == "1-800-8-2-76278"
# decodePhoneNumber("1.800.I.C.BUTTS") == "1.800.4.2.28887"
# decodePhoneNumber("1-888-GET-RICH") == "1-888-438-7424"
# decodePhoneNumber("555-U-HUNGRY!") == "555-8-486479!"
 

# 🔎 EXPLORE
# List your assumptions & discoveries:
#  empty phone number? return empty string
#  don't have to group 3 numbers at a time
#  Do not have to convert the nonalphanumeric characters


# Insightful & revealing test cases:
#  empty string
# only uppercase alphabet characters
# mixed-case alphabet characters
# non-alphabetical characters

# 🧠 BRAINSTORM
# What approaches could work?
# Algorithm 1:
# Time: O(N)
# Space: O(N) store answer in a new string
 

# 📆 PLAN
# Outline of algorithm #: 
# traverse string, and if the character is a number, leave it alone, and if it is a number, get the number equivalent and store the result in  a new string.

# for each element in the string 
#   if it is a number is numeric()
#     store this in result
#   else if it is a letter isalpha()
#     get the equivalent number from dictionary
#     store in result
#   else
#     store in result

# return result 


# 🛠️ IMPLEMENT
# function decodePhoneNumber(text) {
# def decodePhoneNumber(text: str) -> str:

# The dial pad mapping in both directions has been provided for your convenience. 

letterToDigit = {
  'A':'2', 'B':'2', 'C':'2',
  'D':'3', 'E':'3', 'F':'3',
  'G':'4', 'H':'4', 'I':'4',
  'J':'5', 'K':'5', 'L':'5',
  'M':'6', 'N':'6', 'O':'6',
  'P':'7', 'Q':'7', 'R':'7', 'S':'7',
  'T':'8', 'U':'8', 'V':'8',
  'W':'9', 'X':'9', 'Y':'9', 'Z':'9',
  }

digitToLetters = {
  '2':['A','B','C'],
  '3':['D','E','F'],
  '4':['G','H','I'],
  '5':['J','K','L'],
  '6':['M','N','O'],
  '7':['P','Q','R','S'],
  '8':['T','U','V'],
  '9':['W','X','Y','Z']
}
 
def decodePhoneNumber(text: str) -> str:
  phoneNumber = []
  if not text:
    return ''.join(phoneNumber)
  for character in text.upper(): #make all characters uppercase
    if character in letterToDigit:
      phoneNumber.append(letterToDigit.get(character)) #can also do letterToDigit[character]
    else:
      phoneNumber.append(character)

  return ''.join(phoneNumber) #makes into one string

# 🧪 VERIFY
# Run tests. Methodically debug & analyze issues.
print(decodePhoneNumber("1-800-U-B-SMART") == "1-800-8-2-76278")
print(decodePhoneNumber("1.800.I.C.BUTTS") == "1.800.4.2.28887")
print(decodePhoneNumber("1-888-GET-RICH") == "1-888-438-7424")
print(decodePhoneNumber("555-U-HUNGRY!") == "555-8-486479!")
print(decodePhoneNumber("ORANGES") == "6726437")
print(decodePhoneNumber("C O C O N U T") == "2 6 2 6 6 8 8")
print(decodePhoneNumber("B_A_N_A_N_A_S") == "2_2_6_2_6_2_7")
print(decodePhoneNumber("I 1 I 1 I 1 I") == "4 1 4 1 4 1 4")
print(decodePhoneNumber("1111 AaBb CcDd EeFf 1111") == "1111 2222 2233 3333 1111")
print(decodePhoneNumber("777 EcsTaSy 777") == "777 3278279 777")
print(decodePhoneNumber("") == "")
