# /*
# '''
# ❓ PROMPT
# You're practicing the Faro shuffle in cardistry (https://www.youtube.com/shorts/UPv0vH-PlQo). You start with red cards in one hand and black cards in the other and try to interweave them perfectly, meaning the colors alternate every card once you merge them into a single deck.

# You build a machine that accepts a deck of cards to automatically determine if a deck is a perfect interweave. Currently, it can interpret the card's color; you need to write the algorithm.

# Example(s)
# isPerfectWeave(["B", "B", "R", "B", "R"]) is false
# isPerfectWeave(["R", "B", "R", "B", "B"]) is false
# isPerfectWeave(["R", "B", "R", "B", "R", "B", "R", "B", "R", "B", "R", "B"]) is true
 

# 🔎 EXPLORE
# List your assumptions & discoveries:
# case sensitive? ignore this 


# Insightful & revealing test cases:
 

# 🧠 BRAINSTORM
# What approaches could work?
# Algorithm 1:
# Time: O(1)
# Space: O(1)
 

# 📆 PLAN
# Outline of algorithm #: 
#  for each element
#  weave = true
#   compare the string to the next string. if same
#     return false

#   return weave


# 🛠️ IMPLEMENT
# function isPerfectWeave(deck) {
# def isPerfectWeave(deck: list[str]) -> bool:
 
def isPerfectWeave(deck: list[str]) -> bool:
  weave = True
  for x in range(len(deck)-1):
    if deck[x] == deck[x+1]:
      return False
  
  return weave

# 🧪 VERIFY
# Run tests. Methodically debug & analyze issues.
print(isPerfectWeave(["R", "R", "R", "R", "R"]) == False)
print(isPerfectWeave(["R", "B", "R", "R", "R"]) == False)
print(isPerfectWeave(["B", "B", "R", "B", "R"]) == False)
print(isPerfectWeave(["R", "B", "R", "B", "B"]) == False)
print(isPerfectWeave(["B", "R", "B", "R", "B", "R", "B", "R", "B", "R"]))
print(isPerfectWeave(["R", "B", "R", "B", "R", "B", "R", "B", "R", "B", "R", "B"]))
# '''
# */
