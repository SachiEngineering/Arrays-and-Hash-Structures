# In this variation session, we will solve the same problem 3 different ways.The basic problem is:
# Given an array of positive integers, find the first element that occurs k number of times. If no element occurs k times, return -1. You may assume k is greater than 0.

# Examples:
# • Given an array: [1, 2, 2, 3, 3], k: 2 // returns 2
# • Given an array: [], k: 1 // returns -1

##############################################################################################
# 1.The standard solution is to use a dictionary to keep track of the number of repetitions.Early return when you find an element that hits k repeats.

# init dictionary
# for each element
#   count += 1
#   check if count == k
#     if yes, return the element value

# return -1

def firstToK(arr, k):
  repetitions = {}

  for element in arr:                 #for each element
    if element in repetitions:        #if the element is in the dictionary
      repetitions[element] += 1       #add one to the count of reps
      if repetitions[element] == k:   #check if the count
        return element
    else:
      repetitions[element] = 1

  return -1

# Verify
print(firstToK([1, 2, 2, 3, 3],2)==2)
print(firstToK([],1)==-1)

##############################################################################################
# 2.The original solution, but do not return early.Build up the full dictionary of counts.Iterate through the array again and return the first one whose count is greater than or equal to k. Discuss how this does not change the overall runtime or space complexity.

def firstToK2(arr, k):
  repetitions = {}

  for element in arr:                 #for each element
    if element in repetitions:        #if the element is in the dictionary
      repetitions[element] += 1       #add one to the count of reps
    else:
      repetitions[element] = 1

  #iterate through arr again
  for each in arr:
    if repetitions[each] >= k:
      return each
  return -1

# Verify
print(firstToK2([1, 2, 2, 3, 3],2)==2)
print(firstToK2([],1)==-1)


##############################################################################################
# 3.For each element, iterate through the rest of the array to see if it's repeated k times. If it is, return it. Otherwise, go on to the next element. Walk through how this approach is O(n^2) runtime.

distinct = []
def firstToK3(arr, k):

  for element in arr:           #for each element
    count = 0
    for secondElement in arr:   #for each element (again)
      
      if element == secondElement:  #if the first element equals the element of the second pass
        count += 1
      if count >= k:
        return element
  
  return -1      

# Verify
print(firstToK3([1, 2, 2, 3, 3],2)==2)
print(firstToK3([],1)==-1)
print(firstToK3([1,1,1,1,1],2)==1)


##############################################################################################
# Extra problems if there is time:
# 4.How many distinct values occur exactly k times ?
# 5.How many distinct values occur at minimum k times ?
# 6.Find the mininum value that occurs at least k times ?
# 7.Find the mode.Recall the mode is the most frequently occurring value ?
